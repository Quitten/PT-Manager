<vulnerability><name>Improper Input Validation</name><severity>Unclassified</severity><description>Os valores recebidos pela aplica&#231;&#227;o n&#227;o est&#227;o sendo tratados da maneira adequada, o que pode permitir uma altera&#231;&#227;o no funcionamento ou nas informa&#231;&#245;es que ela fornece ao usu&#225;rio. 
Dados n&#227;o confi&#225;veis podem ser enviados para um interpretador como parte de um comando ou uma consulta. Isso pode ocasionar em uma consulta ao banco de dados, execu&#231;&#227;o de comandos no sistema operacional, inje&#231;&#227;o de c&#243;digo em JavaScript, etc. Podendo denegrir a imagem do banco e comprometer dados confidenciais e/ou pessoais dos clientes. 
Al&#233;m disso, em alguns casos, pode ocorrer um transbordamento de dados, ou seja, o envio de volume de dados no qual a aplica&#231;&#227;o n&#227;o est&#225; preparada para receber, podendo at&#233; mesmo ocasionar em uma parada total do sistema. 
</description><mitigation>1. Definir o conjunto permitido de caracteres a serem aceitos em cada campo. (Exemplo: Se um campo for exclusivo para telefone, validar somente n&#250;meros). Nesse caso, uma &#8220;whitelist&#8221; &#233; eficiente, pois envolve a defini&#231;&#227;o exata do que est&#225; autorizado e, por defini&#231;&#227;o, todo o resto ser&#225; bloqueado. Mas para isso, &#233; preciso tomar cuidado, para que n&#227;o haja conflito com caracteres necess&#225;rios, por exemplo, h&#237;fen, @, ponto, em campos de e-mail, ou h&#237;fen e ap&#243;strofo em nomes. 
2. Checar se os dados est&#227;o dentro dos limites de comprimento, ter um limite m&#237;nimo e m&#225;ximo de par&#226;metros em cada campo espec&#237;fico. (Exemplo: campo de cpf, al&#233;m de ser exclusivo para n&#250;meros, o limite m&#237;nimo e o m&#225;ximo, &#233; de 11 caracteres). 
3. Usar express&#245;es regulares para certificar que os dados de entrada se enquadram no pr&#233;-requisito.  
</mitigation><color /><risk>Essa vulnerabilidade, pode causar fragilidades no sistema, no banco de dados, em uma p&#225;gina HTML, ou em qualquer sistema que receba dados de uma fonte externa. Os dados manipulados pelo atacante podem iludir o interpretador para que este execute comandos indesejados, altere informa&#231;&#245;es da aplica&#231;&#227;o ou permita o acesso a dados n&#227;o autorizados.
Um atacante pode fornecer um grande volume de dados em uma entrada em que a aplica&#231;&#227;o n&#227;o est&#225; esperando receber, mas mesmo assim valida e n&#227;o suporta, causando um buffer overflow, e podendo gerar indisponibilidade no sistema. 
Ele tamb&#233;m pode manipular um banco de dados, coletando, inserindo, extraindo informa&#231;&#245;es dos usu&#225;rios, comprometendo dados confidenciais e/ou pessoais. 
Al&#233;m disso, ele pode usar uma entrada de dados maliciosa e alterar dados no front-end da aplica&#231;&#227;o. Pode injetar o c&#243;digo dele em JavaScript, e assim alterar o conte&#250;do da p&#225;gina de modo a denegrir a imagem da corpora&#231;&#227;o, etc.
</risk><cweTiTle>Improper Input Validation</cweTiTle><cweNum>CWE-20</cweNum><references>https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet
https://cwe.mitre.org/data/definitions/20.html
https://www.owasp.org/index.php/Data_Validation
https://www.owasp.org/index.php/Top_10_2013-A1-Injection
</references><owasp_class>OWASP:</owasp_class></vulnerability>