<vulnerability><name>Cross-site Request Forgery (CSRF)</name><severity>Unclassified</severity><description>Cross-site Request Forgery (CSRF) &#233; uma classe de ataques onde uma p&#225;gina, e-mail ou aplicativo malicioso az com que o navegador da v&#237;tima submeta uma requisi&#231;&#227;o maliciosa que realizar&#225; uma a&#231;&#227;o indesejada (uma mudan&#231;a de estado) dentro de uma aplica&#231;&#227;o web no qual ela est&#225; autenticada. A explora&#231;&#227;o do CSRF se d&#225; por meio de aplica&#231;&#245;es vulner&#225;veis que n&#227;o possuem controles espec&#237;ficos para valida&#231;&#227;o da origem das requisi&#231;&#245;es. Para que o ataque funcione, a v&#237;tima precisa estar autenticada na aplica&#231;&#227;o vulner&#225;vel.</description><mitigation>1. Adicionar um token anti-CSRF em requisi&#231;&#245;es que mudem um estado na aplica&#231;&#227;o.

1.1. Utilizar um token anti-CSRF incorporado ao corpo da p&#225;gina HTML utilizando o atributo "hidden" que mude a cada nova requisi&#231;&#227;o (Solu&#231;&#227;o recomendada), desse modo, o atacante n&#227;o conseguir&#225; reutilizar o mesmo valor de token, caso o capture.

1.2. O token tamb&#233;m pode ser utilizado por sess&#227;o, ou seja, a cada nova sess&#227;o, ser&#225; gerado um novo token. O risco n&#227;o &#233; mitigado por completo, pois caso o valor do token seja capturado, a possibilidade do exito do ataque aumenta.

Solu&#231;&#245;es complementares:

2. Checar o atributo "Referer" do cabe&#231;alho da requisi&#231;&#227;o para saber sua origem.

3. Caso o atributo "Origin" do cabe&#231;alho estiver presente, checa-lo para valida&#231;&#227;o.

4. Mandar um desafio ao usu&#225;rio, como por exemplo um captcha ou pedir a senha novamente, para confirma&#231;&#227;o.</mitigation><color /><risk>Este tipo de ataque fere o princ&#237;pio de irretratabilidade, dificultando provar que o executante da a&#231;&#227;o n&#227;o foi a v&#237;tima. O atacante pode mudar e-mails de contas, senhas, realizar transfer&#234;ncias banc&#225;rias e, caso a v&#237;tima possua uma conta que tenha privil&#233;gios de administrador de uma aplica&#231;&#227;o web, a mesma pode ser comprometida. Por exemplo, em um site de e-commerce, o atacante pode enviar um link malicioso &#224; um administrador do sistema e alterar o valor do produto na hora da compra. Nesse caso, &#233; dif&#237;cil provar que a altera&#231;&#227;o do valor n&#227;o foi feita pelo administrador Em caso do ataque gerar uma mudan&#231;a no conte&#250;do da aplica&#231;&#227;o, como uma mudan&#231;a de imagem ou publica&#231;&#227;o de conte&#250;do impr&#243;prio, podem denegrir a imagem da institui&#231;&#227;o.</risk><cweTiTle>Cross-Site Request Forgery (CSRF)</cweTiTle><cweNum>CWE-352</cweNum><references>https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29
https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project#tab=Main (Java) http://www.asp.net/web-api/overview/security/preventing-cross-site-request-forgery-csrf-attacks
http://resources.infosecinstitute.com/fixing-csrf-vulnerability-in-php-application/</references><owasp_class>OWASP:</owasp_class></vulnerability>